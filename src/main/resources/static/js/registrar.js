async function registrarUsuarios() {
    let datos = {
        username: document.getElementById('txtUserName').value.trim(),
        nombres: document.getElementById('txtNombre').value.trim(),
        cedula: document.getElementById('txtCedula').value.trim(),
        correo: document.getElementById('txtCorreo').value.trim(),
        direccion: document.getElementById('txtDireccion').value.trim(),
        telefono: document.getElementById('txtTelefono').value.trim(),
        password: document.getElementById('txtPassword').value,
        estado: document.getElementById('selectEstado').value,
        rol: document.getElementById('selectRol').value
    };

    let repetirPassword = document.getElementById('txtRepeatPassword').value;

    // Validar que no haya campos vac√≠os
    for (let key in datos) {
        if (datos[key] === "") {
            alert(`‚ùå El campo "${key}" no puede estar vac√≠o.`);
            return;
        }
    }

    // Validar nombres y apellidos (solo letras y espacios, incluyendo √± y tildes)
    const nombreRegex = /^[A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\s]+$/;
    if (!nombreRegex.test(datos.nombres)) {
        alert("‚ùå Los nombres solo deben contener letras y espacios.");
        return;
    }
    if (!nombreRegex.test(datos.apellidos)) {
        alert("‚ùå Los apellidos solo deben contener letras y espacios.");
        return;
    }

    // Validar c√©dula (solo n√∫meros, m√°ximo 10 d√≠gitos)
    const cedulaRegex = /^\d{1,10}$/;
    if (!cedulaRegex.test(datos.cedula)) {
        alert("‚ùå La c√©dula debe contener solo n√∫meros y tener m√°ximo 10 d√≠gitos.");
        return;
    }

    // Validar direcci√≥n (puede contener letras, n√∫meros, espacios y # - . /)
    const direccionRegex = /^[A-Za-z0-9\s#\-.\/]+$/;
    if (!direccionRegex.test(datos.direccion)) {
        alert("‚ùå La direcci√≥n contiene caracteres no permitidos.");
        return;
    }

    // Validar tel√©fono (solo n√∫meros)
    const telefonoRegex = /^\d+$/;
    if (!telefonoRegex.test(datos.telefono)) {
        alert("‚ùå El tel√©fono solo debe contener n√∫meros.");
        return;
    }

    // Validar contrase√±a (m√≠nimo 8 caracteres, una may√∫scula, un n√∫mero y un car√°cter especial)
    const passwordRegex = /^(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/;
    if (!passwordRegex.test(datos.password)) {
        alert("‚ùå La contrase√±a debe tener al menos:\nüîπ 8 caracteres\nüîπ 1 may√∫scula\nüîπ 1 n√∫mero\nüîπ 1 car√°cter especial.");
        return;
    }

    // Validar que las contrase√±as coincidan
    if (datos.password !== repetirPassword) {
        alert("‚ùå Las contrase√±as no coinciden.");
        return;
    }

    // Validar el correo y determinar el rol
    const correoEmpresaRegex = /^[a-zA-Z0-9._%+-]+@drivezone\.com$/;
    if (correoEmpresaRegex.test(datos.correo)) {
        if (!["Administrativos", "Empleados", "Asesor de ventas"].includes(datos.rol)) {
            alert("‚ùå Si el usuario es empleado, debe especificar un rol v√°lido: Administrativos, Empleados o Asesor de ventas.");
            return;
        }
    } else {
        datos.rol = "Cliente"; // Cualquier otro correo es un cliente
    }

    alert("‚úÖ Todos los datos son v√°lidos. Enviando informaci√≥n...");

    try {
        const request = await fetch('api/usuarios', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(datos)
        });

        if (!request.ok) {
            const errorData = await request.json();
            alert(`‚ùå Error en el registro: ${errorData.mensaje || "Error desconocido"}`);
            return;
        }

        alert("‚úÖ Usuario registrado correctamente.");
        window.location.href = "index.html";
    } catch (error) {
        alert("‚ùå Hubo un problema con el registro. Revisa la consola para m√°s detalles.");
        console.error(error);
    }
}